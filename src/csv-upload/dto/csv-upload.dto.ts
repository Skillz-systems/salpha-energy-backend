import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import {
  IsOptional,
  IsNumber,
  IsBoolean,
  IsString,
  Min,
  Max,
} from 'class-validator';
import { Transform } from 'class-transformer';

export enum CsvDataType {
  SALES = 'sales',
  TRANSACTIONS = 'transactions',
  MIXED = 'mixed',
  AUTO_DETECT = 'auto_detect',
}

export class CsvFileUploadDto {
  @ApiProperty({
    type: 'string',
    format: 'binary',
    description: 'CSV or Excel file to upload (.csv, .xlsx, .xls)',
  })
  file: Express.Multer.File;
}

export class ProcessCsvDto {
  @ApiPropertyOptional({
    description: 'Number of records to process per batch',
    minimum: 10,
    maximum: 1000,
    default: 100,
  })
  @IsOptional()
  @IsNumber()
  @Min(10)
  @Max(1000)
  @Transform(({ value }) => parseInt(value))
  batchSize?: number = 100;

  @ApiPropertyOptional({
    description: 'Skip validation if file was already validated',
    default: false,
  })
  @IsOptional()
  @IsBoolean()
  @Transform(({ value }) => value === 'true' || value === true)
  skipValidation?: boolean = false;
}

export class ValidationResultDto {  
  @ApiProperty({ description: 'Whether the file structure is valid' })
  isValid: boolean;

  @ApiProperty({ description: 'Detected data types in the file' })
  detectedTypes: CsvDataType[];

  @ApiProperty({ description: 'File information' })
  fileInfo: {
    name: string;
    size: number;
    type: string;
    sheets?: string[]; // For Excel files
  };

  @ApiProperty({ description: 'Sheet analysis for each detected sheet' })
  sheetAnalysis: Array<{
    sheetName: string;
    dataType: CsvDataType;
    totalRows: number;
    headers: string[];
    missingFields: string[];
    sampleData: Record<string, any>[];
  }>;

  @ApiProperty({ description: 'Overall validation errors' })
  errors: string[];

  @ApiProperty({ description: 'Overall validation warnings' })
  warnings: string[];

  // @ApiProperty({ description: 'Auto-generated defaults that will be used' })
  // autoGeneratedDefaults: {
  //   categories: {
  //     product: { id: string; name: string; type: string };
  //     inventory: { id: string; name: string; type: string };
  //   };
  //   defaultUser: {
  //     id: string;
  //     email: string;
  //     firstname: string;
  //     lastname: string;
  //   };
  //   inventoryCategories: Array<{ id: string; name: string; type: string }>;
  //   defaultRole: { id: string; role: string };
  // };
}

export class CsvUploadStatsDto {
  @ApiProperty({ description: 'Upload session identifier' })
  sessionId: string;

  @ApiProperty({ description: 'Total number of records to process' })
  totalRecords: number;

  @ApiProperty({ description: 'Number of records successfully processed' })
  processedRecords: number;

  @ApiProperty({ description: 'Number of records with errors' })
  errorRecords: number;

  @ApiProperty({ description: 'Number of records skipped' })
  skippedRecords: number;

  @ApiProperty({ description: 'Current processing progress (0-100)' })
  progressPercentage: number;

  @ApiProperty({
    description: 'Processing status',
    enum: ['pending', 'processing', 'completed', 'failed', 'cancelled'],
  })
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';

  @ApiProperty({ description: 'Breakdown by data type and sheet' })
  breakdown: {
    sheets: Array<{
      sheetName: string;
      dataType: CsvDataType;
      total: number;
      processed: number;
      errors: number;
      created: {
        customers: number;
        products: number;
        sales: number;
        transactions: number;
        contracts: number;
      };
    }>;
  };

  @ApiProperty({ description: 'Processing errors encountered' })
  errors: Array<{
    sheet: string;
    row: number;
    field: string;
    message: string;
    data: Record<string, any>;
  }>;

  @ApiProperty({ description: 'Processing start time' })
  startTime: Date;

  @ApiProperty({ description: 'Processing end time' })
  endTime?: Date;

  @ApiProperty({ description: 'Estimated time remaining (in seconds)' })
  estimatedTimeRemaining?: number;
}

export class CsvUploadResponseDto {
  @ApiProperty({ description: 'Upload session identifier' })
  sessionId: string;

  @ApiProperty({ description: 'Whether the upload was successful' })
  success: boolean;

  @ApiProperty({ description: 'Response message' })
  message: string;

  @ApiProperty({ description: 'Upload statistics' })
  stats: CsvUploadStatsDto;

  @ApiProperty({
    description: 'Validation result (if validation was performed)',
  })
  validation?: ValidationResultDto;
}

// Internal DTOs for data processing
export class SalesCsvRowDto {
  'External ID (Serial No)'?: string;
  'Customer ID'?: string;
  'Customer Name'?: string;
  'Gender of Primary Account Holder'?: string;
  'Customer Category'?: string;
  'Customer Type'?: string;
  'Location (Address)'?: string;
  'Location (State)'?: string;
  'Location (LGA)'?: string;
  'Phone Number'?: string;
  'Alternate phone number'?: string;
  'Latitude'?: string;
  'Longitude'?: string;
  'Payment Date'?: string;
  'Model'?: string;
  'PV Capacity (W)'?: string;
  'Type of Payment'?: string;
  'Retail Cost of System (NGN)'?: string;
  'Cost to End User (N)'?: string;
  'Payment Plan'?: string;
  'Downpayment Amount (NGN)'?: string;
  'Installment Amount (NGN)'?: string;
  'Quantity'?: string;
  
  CUSTOMER_NAME?: string;
  contractNumber?: string;
  ADDRESS_LINE?: string;
  MOBILE_NUMBER?: string;
  LOAN_AMOUNT?: string;
  'contract DATE'?: string;
  PRODUCT?: string;
  'PRODUCT SERIAL NUMBER'?: string;
  numberOfUnits?: string;
  'client.profile.gps.latitude'?: string;
  'client.profile.gps.longitude'?: string;
  'client.profile.gender'?: string;

  // Handle variations in column names
  [key: string]: any;
}

export class TransactionsCsvRowDto {
  transactionId?: string;
  amount?: string;
  reference?: string;
  date?: string;

  // Handle variations in column names
  [key: string]: any;
}

export class BatchProcessRequestDto {
  @ApiProperty({ description: 'Session ID to process' })
  @IsString()
  sessionId: string;

  @ApiProperty({ description: 'Specific batch index to process' })
  @IsNumber()
  batchIndex: number;
}

export class SessionStatsRequestDto {
  @ApiProperty({ description: 'Session ID to get stats for' })
  @IsString()
  sessionId: string;
}
