import { PrismaService } from '../prisma/prisma.service';
import { DataMappingService } from './data-mapping.service';
import { DefaultsGeneratorService } from './defaults-generator.service';
import { FileParserService } from './file-parser.service';
import { ProcessCsvDto, ValidationResultDto, CsvUploadResponseDto, CsvUploadStatsDto } from './dto/csv-upload.dto';
export declare class CsvUploadService {
    private readonly prisma;
    private readonly dataMappingService;
    private readonly defaultsGenerator;
    private readonly fileParser;
    private readonly logger;
    private readonly sessions;
    private readonly SALES_HEADER_PATTERNS;
    private readonly TRANSACTION_HEADER_PATTERNS;
    constructor(prisma: PrismaService, dataMappingService: DataMappingService, defaultsGenerator: DefaultsGeneratorService, fileParser: FileParserService);
    validateFile(file: Express.Multer.File): Promise<ValidationResultDto>;
    private getMockDefaults;
    processFile(file: Express.Multer.File, processCsvDto: ProcessCsvDto): Promise<CsvUploadResponseDto>;
    processBatch(sessionId: string, batchIndex: number): Promise<CsvUploadStatsDto>;
    getUploadStats(sessionId: string): Promise<CsvUploadStatsDto>;
    cancelSession(sessionId: string): Promise<{
        success: boolean;
        message: string;
        sessionId: string;
    }>;
    private analyzeSheet;
    private detectDataType;
    private calculateMatchScore;
    private matchesPattern;
    private getExpectedFields;
    private createProcessingSession;
    private processSessionBatches;
    private processBatchData;
    private processSynchronizedBatch;
    private processSalesRowWithImmediateTransaction;
    private processTransactionRowWithSaleId;
    private processSingleSheetBatch;
    private isSalesRow;
    private isTransactionRow;
    private processSalesRow;
    private processTransactionRow;
    private shouldCreateContract;
    private extractValue;
    private parseNumber;
    private createUnmatchedTransaction;
    private findRelatedSaleId;
    private parseDate;
    private cleanupOldSessions;
}
